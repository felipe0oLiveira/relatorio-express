#!/usr/bin/env python3
"""
Script de teste: Gera√ß√£o de Relat√≥rios Excel Autom√°ticos
"""
import requests
import json
from datetime import datetime

# Configura√ß√µes
BASE_URL = "http://localhost:8000"
TOKEN = "SEU_TOKEN_AQUI"  # Substitua pelo seu token JWT

headers = {
    "Authorization": f"Bearer {TOKEN}"
}

def test_generate_excel_summary():
    """Teste 1: Gerar relat√≥rio Excel de resumo"""
    print("üìä 1. Testando gera√ß√£o de relat√≥rio Excel - Resumo...")
    
    try:
        with open('test_data.csv', 'rb') as file:
            files = {'file': ('test_data.csv', file, 'text/csv')}
            data = {
                'report_type': 'summary',
                'title': 'Relat√≥rio de Vendas - Resumo',
                'include_summary': 'true',
                'include_charts': 'true'
            }
            
            response = requests.post(
                f"{BASE_URL}/reports/generate-excel?token={TOKEN}",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                # Salvar o arquivo Excel
                filename = f"relatorio_resumo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ Relat√≥rio Excel gerado com sucesso: {filename}")
                return True
            else:
                print(f"‚ùå Erro: {response.status_code} - {response.text}")
                return False
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio: {e}")
        return False

def test_generate_excel_geography():
    """Teste 2: Gerar relat√≥rio Excel de an√°lise geogr√°fica"""
    print("\nüåç 2. Testando gera√ß√£o de relat√≥rio Excel - An√°lise Geogr√°fica...")
    
    try:
        with open('test_data.csv', 'rb') as file:
            files = {'file': ('test_data.csv', file, 'text/csv')}
            data = {
                'report_type': 'geography',
                'title': 'Relat√≥rio de Vendas por Regi√£o',
                'value_column': 'Total Sales',
                'region_column': 'Region',
                'include_summary': 'true',
                'include_charts': 'true'
            }
            
            response = requests.post(
                f"{BASE_URL}/reports/generate-excel?token={TOKEN}",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                filename = f"relatorio_geografia_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ Relat√≥rio Excel geogr√°fico gerado: {filename}")
                return True
            else:
                print(f"‚ùå Erro: {response.status_code} - {response.text}")
                return False
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio geogr√°fico: {e}")
        return False

def test_generate_excel_from_template():
    """Teste 3: Gerar relat√≥rio Excel usando template"""
    print("\nüìã 3. Testando gera√ß√£o de relat√≥rio Excel com template...")
    
    try:
        # Primeiro, vamos listar os templates dispon√≠veis
        templates_response = requests.get(f"{BASE_URL}/templates?token={TOKEN}")
        if templates_response.status_code == 200:
            templates = templates_response.json()
            if templates:
                template_id = templates[0]['id']  # Usar o primeiro template
                
                with open('test_data.csv', 'rb') as file:
                    files = {'file': ('test_data.csv', file, 'text/csv')}
                    data = {
                        'template_id': str(template_id),
                        'title': 'Relat√≥rio com Template'
                    }
                    
                    response = requests.post(
                        f"{BASE_URL}/reports/generate-excel-from-template?token={TOKEN}",
                        files=files,
                        data=data
                    )
                    
                    if response.status_code == 200:
                        filename = f"relatorio_template_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                        with open(filename, 'wb') as f:
                            f.write(response.content)
                        print(f"‚úÖ Relat√≥rio Excel com template gerado: {filename}")
                        return True
                    else:
                        print(f"‚ùå Erro: {response.status_code} - {response.text}")
                        return False
            else:
                print("‚ö†Ô∏è Nenhum template encontrado. Criando um template primeiro...")
                return False
        else:
            print(f"‚ùå Erro ao listar templates: {templates_response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio com template: {e}")
        return False

def test_generate_excel_risk():
    """Teste 4: Gerar relat√≥rio Excel de an√°lise de risco"""
    print("\n‚ö†Ô∏è 4. Testando gera√ß√£o de relat√≥rio Excel - An√°lise de Risco...")
    
    try:
        with open('test_data.csv', 'rb') as file:
            files = {'file': ('test_data.csv', file, 'text/csv')}
            data = {
                'report_type': 'risk',
                'title': 'Relat√≥rio de An√°lise de Risco',
                'value_column': 'Total Sales',
                'include_summary': 'true',
                'include_charts': 'true'
            }
            
            response = requests.post(
                f"{BASE_URL}/reports/generate-excel?token={TOKEN}",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                filename = f"relatorio_risco_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ Relat√≥rio Excel de risco gerado: {filename}")
                return True
            else:
                print(f"‚ùå Erro: {response.status_code} - {response.text}")
                return False
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio de risco: {e}")
        return False

def main():
    """Fun√ß√£o principal para testar gera√ß√£o de Excel"""
    
    print("üéØ TESTE: Gera√ß√£o de Relat√≥rios Excel Autom√°ticos")
    print("=" * 60)
    
    # Teste 1: Relat√≥rio de resumo
    test_generate_excel_summary()
    
    # Teste 2: Relat√≥rio geogr√°fico
    test_generate_excel_geography()
    
    # Teste 3: Relat√≥rio com template
    test_generate_excel_from_template()
    
    # Teste 4: Relat√≥rio de risco
    test_generate_excel_risk()
    
    print("\n" + "=" * 60)
    print("‚úÖ Testes de gera√ß√£o de Excel conclu√≠dos!")
    print("\nüí° Como usar no Swagger UI:")
    print("1. Acesse: http://localhost:8000/docs?token=SEU_TOKEN")
    print("2. Teste os endpoints:")
    print("   - POST /reports/generate-excel")
    print("   - POST /reports/generate-excel-from-template")
    print("3. Fa√ßa upload do arquivo e configure os par√¢metros")
    print("4. O Excel ser√° gerado automaticamente!")

if __name__ == "__main__":
    main() 